// Thanks to https://www.arborinteractive.com/?p=450

using MoonSharp.Interpreter;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using UnityEditor.Callbacks;
using UnityEngine;

namespace Yeeter.Editor
{
    public class LuaBindingsGenerator
    {
        [DidReloadScripts]
        private static void GenerateLuaBindings()
        {
            string path = Path.Combine(
                Application.streamingAssetsPath, "Data", "Core", "Scripts", "Generated", "Bindings.generated.lua");
            string str = "-- Do not touch. Touching *will* break the game.\n" +
                         "-- Auto-generated by LuaBindingsGenerator.cs. TODO: Document methods.\n\n";

            // Find each class with a MoonSharpUserDataAttribute.
            var types = new List<Type>();
            var assembly = typeof(LuaManager).Assembly;
            var assemblyCSharp = Assembly.Load("Assembly-CSharp");
            foreach (var type in assembly.GetTypes())
            {
                if (type.GetCustomAttributes(typeof(MoonSharpUserDataAttribute), false).Length > 0)
                {
                    types.Add(type);
                }
            }
            foreach (var type in assemblyCSharp.GetTypes())
            {
                if (type.GetCustomAttributes(typeof(MoonSharpUserDataAttribute), false).Length > 0)
                {
                    types.Add(type);
                }
            }

            foreach (var type in types)
            {
                // Add global type table.
                str += type.Name.Replace("LuaProxy", "") + " = {}\n";
                var aliases = new List<string>();
                foreach (var alias in type.GetCustomAttributes(typeof(MoonSharpAliasAttribute), false))
                {
                    aliases.AddRange((alias as MoonSharpAliasAttribute).Aliases);
                }
                aliases.ForEach(s => str += s + " = " + type.Name + "\n");
                // Add methods.
                foreach (var method in type.GetMethods())
                {
                    if (!method.IsPublic) continue;
                    if (method.DeclaringType != type) continue;
                    if (method.GetCustomAttributes(typeof(MoonSharpHiddenAttribute), false).Length > 0) continue;
                    str += type.Name + "." + method.Name + " = function(";
                    var parameters = method.GetParameters();
                    for (int i = 0; i < parameters.Length; i++)
                    {
                        var parameter = parameters[i];
                        str += parameter.Name + "__" + parameter.ParameterType.Name;
                        if (i != parameters.Length - 1)
                        {
                            str += ", ";
                        }
                    }
                    str += ") end\n";
                }
            }

            Directory.CreateDirectory(Path.GetDirectoryName(path));
            File.WriteAllText(path, str);
        }
    }
}